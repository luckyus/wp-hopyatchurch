// ref: 2. Gutenberg from Scratch: How to Create a Custom Block (210125)
// - npm run build:start (210126)
//
const { registerBlockType } = wp.blocks;
const { RichText, InspectorControls, ColorPalette, MediaUpload, useBlockProps } = wp.blockEditor;
const { PanelBody, IconButton } = wp.components;

const blockStyle = {
	backgroundColor: "#900",
	color: "#fff",
	padding: "20px",
};

registerBlockType("klnc/my-card", {
	// built-in attributes
	title: "My Card",
	description: "Block to generate a my-card",
	icon: "format-image",
	category: "text",

	// custom attributes
	attributes: {
		header: {
			type: "string",
			source: "html",
			selector: "h4",
		},
		title: {
			type: "string",
			source: "html",
			selector: ".title-selector",
		},
		titleColor: {
			type: "string",
			default: "black",
		},
		body: {
			type: "string",
			source: "html",
			selector: "p",
		},
		backgroundImage: {
			type: "string",
			default: null,
		},
	},

	// built-in functions
	edit({ attributes, setAttributes }) {
		// https://developer.wordpress.org/block-editor/tutorials/block-tutorial/writing-your-first-block-type/ (210210)
		const blockProps = useBlockProps();
		const { header, title, body, titleColor, backgroundImage } = attributes;
		const onChangeHeader = (e) => {
			setAttributes({ header: e.target.value });
		};
		const onChangeTitle = (elem) => {
			setAttributes({ title: elem.target.value });
		};
		const onChangeBody = (newValue) => {
			setAttributes({ body: newValue });
		};
		const onChangeTitleColor = (newColor) => {
			setAttributes({ titleColor: newColor });
		};
		const onSelectImage = (newImage) => {
			setAttributes({ backgroundImage: newImage.sizes.full.url });
		};

		return [
			<InspectorControls style={{ marginBottom: "40px" }}>
				<PanelBody title={"Font Color Settings"}>
					<p>
						<strong>Select a Title Color:</strong>
					</p>
					<ColorPalette value={titleColor} onChange={onChangeTitleColor}></ColorPalette>
				</PanelBody>
				<PanelBody title={"Background Image Settings"}>
					<p>
						<strong>Select a Background Image:</strong>
					</p>
					<MediaUpload
						onSelect={onSelectImage}
						type="image"
						value={backgroundImage}
						render={({ open }) => {
							return (
								<IconButton onClick={open} icon="upload" className="editor-media-placeholder__button is-button is-default is-large">
									Background Image
								</IconButton>
							);
						}}
					/>
				</PanelBody>
			</InspectorControls>,
			<div
				{...blockProps}
				style={{
					backgroundImage: `url(${backgroundImage})`,
					backgroundSize: "cover",
					backgroundPosition: "center",
					backgroundRepeat: "no-repeat",
				}}
			>
				<label for="my-card-header">Header:&nbsp;</label>
				<input type="text" id="my-card-header" value={header} onChange={onChangeHeader}></input>
				<br />
				<label for="my-card-title">Title:</label>
				<input type="text" id="my-card-title" value={title} onChange={onChangeTitle} style={{ color: titleColor }} />
				<br />
				<label for="my-card-body">Body:</label>
				<RichText id="my-card-body" key="editable" tagName="p" placeholder="Lorem ipsum dolor sit amet" value={body} onChange={onChangeBody} />
			</div>,
		];
	},

	save({ attributes }) {
		const { header, title, body, titleColor, backgroundImage } = attributes;
		return (
			<div
				style={{
					backgroundImage: `url(${backgroundImage})`,
					backgroundSize: "cover",
					backgroundPosition: "center",
					backgroundRepeat: "no-repeat",
				}}
			>
				<div>This is Generated by the save()...</div>
				<div class="card mb-3">
					<h4 class="card-header d-flex justify-content-between">{header}</h4>
					<div class="card-body">
						<h4 class="card-title title-selector" style={{ color: titleColor }}>
							{title}
						</h4>
						<RichText.Content class="card-text" tagName="p" value={body} />
					</div>
				</div>
			</div>
		);
	},
});
